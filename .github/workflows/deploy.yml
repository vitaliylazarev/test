name: FastAPI CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      run_full_pipeline:
        description: 'Run full pipeline (build → deploy)'
        required: false
        default: false
        type: boolean
      run_deploy_only:
        description: 'Run only deployment'
        required: false  
        default: true
        type: boolean
      run_cleanup:
        description: 'Run cleanup after deployment'
        required: false
        default: true
        type: boolean

jobs:
  build:
    name: 🏗️ Build Docker Image
    runs-on: ubuntu-latest
    # Запускаем build только если выбран полный pipeline
    if: ${{ github.event.inputs.run_full_pipeline == true }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        tags: my-fastapi-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Save build info
      run: |
        echo "✅ Build completed successfully!"
        echo "📦 Image: my-fastapi-app:latest"
        echo "🕐 $(date)"

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    # Запускаем deploy если выбран полный pipeline или только деплой
    if: ${{ github.event.inputs.run_full_pipeline == true || github.event.inputs.run_deploy_only == true }}
    # Ждем завершения build если он запущен
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          echo "🚀 Starting deployment process..."
          echo "📅 $(date)"
          
          # Создаем рабочую директорию
          mkdir -p ~/app
          cd ~/app
          
          # Клонируем или обновляем репозиторий
          if [ ! -d .git ]; then
            echo "📦 Initializing git repository..."
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
            git fetch origin
            git checkout -f main
          else
            echo "🔄 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Останавливаем старые контейнеры
          echo "🛑 Stopping existing containers..."
          docker compose down -v --remove-orphans 2>/dev/null || true
          
          # Запускаем новые контейнеры
          echo "🐳 Building and starting containers..."
          docker compose up -d --build --remove-orphans
          
          # Ждем запуска и проверяем здоровье
          echo "⏳ Waiting for containers to start..."
          sleep 10
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.VPS_HOST }}:8000"
          echo "📊 Running containers:"
          docker ps
          echo "📝 Service logs:"
          docker compose logs --tail=10

  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    # Запускаем cleanup если выбрана опция и после deploy
    if: ${{ github.event.inputs.run_cleanup == true && (needs.deploy.result == 'success' || needs.deploy.result == 'failure') }}
    needs: deploy
    
    steps:
    - name: Cleanup on VPS
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: 22
        script: |
          echo "🧹 Starting cleanup process..."
          echo "📅 $(date)"
          
          # Останавливаем и удаляем контейнеры приложения
          cd ~/app 2>/dev/null && docker compose down -v --rmi local --remove-orphans 2>/dev/null || echo "⚠️ No containers to remove"
          
          # Чистим Docker систему
          echo "🗑️ Cleaning Docker system..."
          docker system prune -af --volumes 2>/dev/null || true
          
          # Чистим временные файлы
          echo "📁 Cleaning temporary files..."
          rm -rf ~/app/tmp/* ~/app/logs/*.log 2>/dev/null || true
          
          echo "✅ Cleanup completed successfully!"
          echo "📊 Disk usage after cleanup:"
          df -h / | grep -v Filesystem
          echo "🐳 Docker disk usage:"
          docker system df

  status:
    name: 📊 Deployment Status
    runs-on: ubuntu-latest
    needs: [build, deploy, cleanup]
    # Всегда запускаем статус
    if: always()
    
    steps:
    - name: Print deployment summary
      run: |
        echo "📋 DEPLOYMENT SUMMARY"
        echo "===================="
        echo "Build result: ${{ needs.build.result || 'skipped' }}"
        echo "Deploy result: ${{ needs.deploy.result || 'skipped' }}"
        echo "Cleanup result: ${{ needs.cleanup.result || 'skipped' }}"
        echo "Workflow URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "🌐 Your application is available at: http://${{ secrets.VPS_HOST }}:8000"
        else
          echo "❌ DEPLOYMENT FAILED!"
          echo "Check the logs above for details."
        fi